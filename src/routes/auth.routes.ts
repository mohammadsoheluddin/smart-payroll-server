// src/routes/auth.ts
import express, { Request, Response } from "express";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import User from "../models/User"; // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡¶°‡ßá‡¶≤

dotenv.config();
const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || "S0m3$Up3r$3creT@Key2025";

// ‚úÖ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∞‡ßÅ‡¶ü
router.post("/register", async (req: Request, res: Response) => {
  const { name, email, username, password } = req.body;

  try {
    // ‡¶è‡¶ï‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¨‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
    const existingUser = await User.findOne({ $or: [{ email }, { username }] });
    if (existingUser) {
      return res.status(409).json({
        message: "‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶á‡¶§‡ßã‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      });
    }

    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá save ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶•‡¶æ‡¶ï‡¶æ pre("save") ‡¶π‡ßÅ‡¶ï ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡ßá
    const newUser = new User({ name, email, username, password });
    await newUser.save();

    res.status(201).json({ message: "‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá" });
  } catch (err) {
    res.status(500).json({ message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", error: err });
  }
});

// ‚úÖ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∞‡ßÅ‡¶ü
router.post("/login", async (req: Request, res: Response) => {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ username });

    if (!user) {
      return res.status(401).json({ message: "‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤" });
    }

    // üëá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶ì ‡¶Ø‡¶æ‡¶§‡ßá comparePassword ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
    const userWithMethod = user as typeof user & {
      comparePassword(candidatePassword: string): Promise<boolean>;
    };

    const isMatch = await userWithMethod.comparePassword(password);

    if (!isMatch) {
      return res.status(401).json({ message: "‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤" });
    }

    const token = jwt.sign({ username: user.username }, JWT_SECRET, {
      expiresIn: "1h",
    });

    res.json({ token });
  } catch (err) {
    res.status(500).json({ message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", error: err });
  }
});

export default router;
